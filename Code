import ctypes
import psutil
import time
import os

# Function to get process name by PID
def get_process_name(pid):
    try:
        return psutil.Process(pid).name()
    except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
        return "Unknown"

# Function to check for usage of GetAsyncKeyState
def scan_for_keylogger_apis():
    suspicious_processes = []

    for proc in psutil.process_iter(['pid', 'name']):
        try:
            pid = proc.info['pid']
            process = psutil.Process(pid)
            exe_path = process.exe()

            # Open process with necessary access rights
            handle = ctypes.windll.kernel32.OpenProcess(0x0410, False, pid)
            if not handle:
                continue

            # Heuristic: Scan executable strings for GetAsyncKeyState
            api_usage = os.popen(f'strings "{exe_path}" | findstr GetAsyncKeyState').read()
            if 'GetAsyncKeyState' in api_usage:
                suspicious_processes.append((pid, get_process_name(pid)))

            ctypes.windll.kernel32.CloseHandle(handle)

        except Exception:
            continue

    return suspicious_processes

# Main loop
if __name__ == "__main__":
    print("Starting Keylogger Detection System...")
    while True:
        detected = scan_for_keylogger_apis()
        if detected:
            print("\nSuspicious processes using keyboard APIs detected:")
            for pid, name in detected:
                print(f"-> PID: {pid}, Process Name: {name}")
        else:
            print("\nNo suspicious keylogging activity detected.")
        
        time.sleep(10)  # Scan every 10 seconds
